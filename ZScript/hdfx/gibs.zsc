class HDFXGibsHandler : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
	{
		let mo = e.Thing;
		if (!mo || !mo.bISMONSTER || mo.bNOBLOOD)
			return;

		if (mo.FindState("XDeath", True) || mo.FindState("gib", True))
			mo.GiveInventory("HDFXInternalOrgans", 1);

		console.printf(mo.FindInventory("HDFXInternalOrgans").." "..mo.GetClassName());
	}
}

class HDFXInternalOrgans : Inventory
{
	bool bGibbed;
	bool bInit;

	default
	{
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		Inventory.MaxAmount 1;
	}

	override void BeginPlay()
	{
		bGibbed = false;
		bInit = false;
		super.BeginPlay();
	}

	override void Tick()
	{
		if (!bInit)
		{
			super.Tick();
			bInit = true;
		}

		if (isFrozen() || !owner)
			return;

		bool inGibbedState = (
			owner.InStateSequence(owner.CurState, owner.ResolveState("XXXDeath")) ||
			owner.InStateSequence(owner.CurState, owner.ResolveState("XDeath")) ||
			owner.InStateSequence(owner.CurState, owner.ResolveState("gib"))
		);

		if (!bGibbed && inGibbedState)
		{
			bGibbed = true;
			owner.A_SpawnItemEx('HDFXGibSpray', 0, 0, 0, vel.x, vel.y, vel.z, flags:SXF_USEBLOODCOLOR|SXF_SETTARGET);
		}
		else if (!inGibbedState && owner.health > 0)
			bGibbed = false;
	}
}

class HDFXGibletA : Actor
{
	double rollFactor;

	action void A_Drip()
	{
		let blud = Actor.Spawn('HDFXBloodTrailFloor',invoker.pos);
		blud.vel = (invoker.vel.xy * cos(invoker.roll), abs(invoker.vel.z) * sin(invoker.roll));
		blud.translation = invoker.translation;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		rollFactor = frandom(-45.0,45.0);
		roll = frandom(0,360);
		scale.x = randompick(-1,1);
	}

	override void Tick()
	{
		if (vel.length() > 0)
			roll += rollFactor;

		gravity = min(gravity + 0.1, 1.0);
		Super.Tick();
	}

	Default
	{
		+MISSILE
		+FLOORCLIP
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+MOVEWITHSECTOR
		+THRUACTORS
		+INTERPOLATEANGLES
		+ROLLSPRITE
		+USEBOUNCESTATE
		BounceType "Doom";
		RenderStyle "Translucent";
		Friction 2.0;
		BounceFactor 0.333;
		WallBounceFactor 0.333;
		Gravity 0.01;
		Radius 2;
		Height 4;
		DeathHeight 4;
		Speed 4;
	}

	States
	{
	Spawn:
		TNT1 A 0;
		GIBL A random(7,11) A_Drip;
		Wait;

	Death:
		"----" A 1
		{
			A_StartSound("blood/bounce",volume:0.25);
			for (int i = 0; i < hdfx_bloodcount; i++)
			{
				A_SpawnItemEx("HDFXBlood", -vel.x, -vel.y, -vel.z, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION|SXF_TRANSFERTRANSLATION);
			}

			bFORCEXYBILLBOARD = false;
			frame += 13;
			roll = 0;
			if (hdfx_gibtime > 0)
				A_SetTics(hdfx_gibtime * random(18,52));

			else
				A_SetTics(hdfx_gibtime);
		}

	Fade:
		#### # 1;
		#### # 0
		{
			alpha -= 0.01;
			if (alpha > 0)
				return ResolveState("Fade");

			return ResolveState(NULL);
		}
		Stop;

	Bounce:
		"----" A 1
		{
			A_StartSound("blood/bounce",volume:clamp(vel.length()*0.05, 0.25, 1.0));
			for (int i = 0; i < hdfx_bloodcount; i++)
			{
				A_SpawnItemEx("HDFXBlood", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERTRANSLATION);
			}

			rollFactor = clamp(frandom(-2.0,2.0) * rollFactor, -45.0, 45.0);
		}
		"----" A random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletB : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL B random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletC : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL C random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletD : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL D random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletE : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL E random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletF : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL F random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletG : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL G random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletH : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL H random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletI : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL I random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletJ : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL J random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletK : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL K random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletL : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL L random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibletM : HDFXGibletA
{
	States
	{
	Spawn:
		TNT1 A 0;
		GIBL M random(7,11) A_Drip;
		Wait;
	}
}

class HDFXRandGiblet : HDFXGibletA
{
	States
	{
	Spawn:
		GIBL A 0 NoDelay { frame = random(0,12); }
		"----" A random(7,11) A_Drip;
		Wait;
	}
}

class HDFXGibSpray : Actor
{
	override void Tick()
	{
		if (target)
			vel = target.pos - pos;

		super.Tick();
	}

	action void A_TossHDFXGib(class<Actor> type)
	{
		Actor giblet;
		if (target)
			giblet = Actor.Spawn(type,(pos.xy + AngleToVector(frandom(0,360),frandom(0,target.radius*2)), pos.z + frandom(0,target.height*4)));

		else
			giblet = Actor.Spawn(type,(pos.xy + AngleToVector(frandom(0,360),frandom(0,16)), pos.z + frandom(0,32)));

		giblet.Vel3DFromAngle(2,frandom(0,360),frandom(-90,0));
		giblet.vel += vel;
		giblet.translation = translation;
	}

	Default
	{
		+NOGRAVITY
		+NOBLOCKMAP
		+THRUACTORS
		+NOTELEPORT
	}

	States
	{
	Spawn:
		TNT1 A 5;
		TNT1 A 0
		{
			for (int i = 0; i < hdfx_bloodcount + 9; i++)
			{
				A_SpawnItemEx("HDFXBlood", 0, 0, frandom(0,64), 0, 0, 0, 0, SXF_TRANSFERTRANSLATION);
			}

			int gib = 0;
			A_StartSound("blood/gib");
			if (hdfx_gibcount < 13)
			{
				for (int i = 0; i < hdfx_gibcount; i++)
				{
					A_TossHDFXGib("HDFXRandGiblet");
				}
			}
			else
			{
				for (int i = 0; i < hdfx_gibcount; i++)
				{
					switch(gib++)
					{
					case 0:
						A_TossHDFXGib("HDFXGibletA");
						break;
					case 1:
						A_TossHDFXGib("HDFXGibletB");
						break;
					case 2:
						A_TossHDFXGib("HDFXGibletC");
						break;
					case 3:
						A_TossHDFXGib("HDFXGibletD");
						break;
					case 4:
						A_TossHDFXGib("HDFXGibletE");
						break;
					case 5:
						A_TossHDFXGib("HDFXGibletF");
						break;
					case 6:
						A_TossHDFXGib("HDFXGibletG");
						break;
					case 7:
						A_TossHDFXGib("HDFXGibletH");
						break;
					case 8:
						A_TossHDFXGib("HDFXGibletI");
						break;
					case 9:
						A_TossHDFXGib("HDFXGibletJ");
						break;
					case 10:
						A_TossHDFXGib("HDFXGibletK");
						break;
					case 11:
						A_TossHDFXGib("HDFXGibletL");
						break;
					case 12:
						A_TossHDFXGib("HDFXGibletM");
						gib = 0;
					}
				}
			}
		}
		Stop;
	}
}
